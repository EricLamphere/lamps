person(first = "Eric",
last = "Lamphere",
role = c("aut", "cre"),
email = "ericjlamphere@gmail.com",
comment = c(ORCID = "YOUR-ORCID-ID"))
person(given = "Eric",
family = "Lamphere",
role = c("aut", "cre"),
email = "ericjlamphere@gmail.com",
comment = c(ORCID = "YOUR-ORCID-ID"))
person(given = "Eric",
family = "Lamphere",
role = c("aut", "cre"),
email = "ericjlamphere@gmail.com")
##########################################################-
# nuke ----
#' Replace all occurrences of a value in a data frame
#' @param data The data frame to which you're replacing values
#' @param nuke_value The value you want to replace with `ash`
#' @param ash The value you want to replace `nuke_value` with
#' @param exact Whether or not you want the match to be exact (T) or use regex (F)
#' @return A data frame with the all occurrences of `nuke_value` replaced with `ash`
#' @examples
#' nuke()
nuke <- function(data, nuke_value = NA, ash = 0, exact = TRUE){
nuked <- mutate_all(data, function(x){
if(is.na(nuke_value)){
replace_na(x, ash)
} else if(exact){
replace(x, x == nuke_value, ash)
} else {
replace(x, x %~% nuke_value, ash)
}
})
return(nuked)
}
mtcars
data.frame(mtcars)
data(")
data()
data("AirPassengers")
View(AirPassengers)
data("ChickWeight")
View(ChickWeight)
nuke(data("ChickWeight"), )
##########################################################-
# nuke ----
#' Replace all occurrences of a value in a data frame
#' @param data The data frame to which you're replacing values
#' @param nuke_value The value you want to replace with `ash`
#' @param ash The value you want to replace `nuke_value` with
#' @param exact Whether or not you want the match to be exact (T) or use regex (F)
#' @return A data frame with the all occurrences of `nuke_value` replaced with `ash`
#' @examples
#' nuke(mtcars, )
nuke <- function(data, nuke_value = NA, ash = 0, exact = TRUE){
nuked <- mutate_all(data, function(x){
if(is.na(nuke_value)){
replace_na(x, ash)
} else if(exact){
replace(x, x == nuke_value, ash)
} else {
replace(x, x %~% nuke_value, ash)
}
})
return(nuked)
}
ChickWeight
nuke(ChickWeight, 1)
library(dplyr)
nuke(ChickWeight, 1)
nuke(ChickWeight, as.factor(1))
data()
band_members
nuke(band_members, "Mick")
nuke(band_members, "Mick", "IT WORKED")
mtcars
nuke(mtcars, 6, "IT WORKED AGAIN")
nuke(mtcars, 6)
devtools::document()
devtools::load_all()
?nuke
devtools::document()
devtools::document()
devtools::load_all()
?nuke
devtools::document()
devtools::load_all()
?nuke
devtools::document()
devtools::load_all()
?nuke
devtools::document()
devtools::load_all()
?nuke
mtcars
head(population)
mpg
calc(mpg, "average mpg", "mean(c(cty, hwy), na.rm = TRUE)")
#' @param labels A character vector used as the names for the newly created columns.
#' @param formulas A character vector of formulas (e.g. \code{col1 / col2}) used to generate the new columns.
#' @param prefix A prefix to append to the beginning of all of the column names in \code{labels}.
#' @return A data frame with the newly calculated columns.
#' @examples
#' calc(band_members, "Mick", "IT WORKED")
#' nuke(mtcars, 6, "IT WORKED AGAIN")
#' nuke(mtcars, 6)
# calc ----
# calculate new columns based on a vector of labels and formulas
calc <- function(df, labels, formulas, prefix = ""){
calculated <- df %>%
mutate_(.dots = setNames(
formulas,
prefix %% labels
))
return(calculated)
}
calc(mpg, "average mpg", "mean(c(cty, hwy), na.rm = TRUE)")
devtools::document()
devtools::load_all()
?calc
?nuke
devtools::document()
devtools::load_all()
?nuke
devtools::document()
devtools::load_all()
?calc
devtools::document()
devtools::document()
devtools::document()
devtools::document()
calc(mpg, "average mpg", "mean(c(cty, hwy), na.rm = TRUE)")
devtools::document()
devtools::document()
devtools::load_all()
?calc
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
packageVersion(dplyr)
packageVersion("dplyr")
iris %>%
nest_by(Species) %>%
left_join(models, by = character()) %>%
rowwise(Species, model_name) %>%
mutate(model = list(lm(formula, data = data))) %>%
summarise(broom::glance(model))
library(dplyr)
install.packages(rlang)
install.packages("rlang")
install.packages("rlang")
library(dplyr)
library(rlang)
install.packages(c("backports", "boot", "broom", "callr", "class", "cli", "covr", "crosstalk", "dbplyr", "devtools", "DT", "ellipsis", "forcats", "fs", "gargle", "ggplot2", "git2r", "haven", "httpuv", "KernSmooth", "later", "lattice", "lubridate", "MASS", "modelr", "nlme", "nnet", "pillar", "pkgbuild", "pkgload", "plyr", "promises", "ps", "purrr", "Rcpp", "rematch2", "reshape2", "rex", "rmarkdown", "roxygen2", "rversions", "scales", "shiny", "spatial", "survival", "testthat", "tibble", "tidyr", "tinytex", "usethis", "withr", "xfun", "xml2"))
library(dplyr)
library(rlang)
library(tidyverse)
library(tidyverse)
iris %>%
nest_by(Species) %>%
left_join(models, by = character()) %>%
rowwise(Species, model_name) %>%
mutate(model = list(lm(formula, data = data))) %>%
summarise(broom::glance(model))
character
library(rlang)
models <- tibble::tribble(
~model_name,    ~ formula,
"length-width", Sepal.Length ~ Petal.Width + Petal.Length,
"interaction",  Sepal.Length ~ Petal.Width * Petal.Length
)
models
View(models)
models <- tibble::tribble(
~model_name,    ~ formula,
"length-width", Sepal.Length ~ Petal.Width + Petal.Length,
"interaction",  Sepal.Length ~ Petal.Width * Petal.Length
)
iris %>%
nest_by(Species) %>%
left_join(models, by = character()) %>%
rowwise(Species, model_name) %>%
mutate(model = list(lm(formula, data = data))) %>%
summarise(broom::glance(model))
iris
unnique(iris$Species)
unique(iris$Species)
iris %>%
nest_by(Species)
iris %>%
nest_by(Species) %>%
left_join(models, by = character())
iris %>%
nest_by(Species) %>%
left_join(models, by = character()) %>%
rowwise(Species, model_name)
iris %>%
nest_by(Species) %>%
left_join(models, by = character()) %>%
rowwise(Species, model_name) %>%
mutate(model = list(lm(formula, data = data)))
iris %>%
nest_by(Species) %>%
left_join(models, by = character()) %>%
rowwise(Species, model_name) %>%
mutate(model = list(lm(formula, data = data))) %>%
summarise(broom::glance(model))
R.version
install.packages("installr")
RVersion
R.version
RStudio.Version()
